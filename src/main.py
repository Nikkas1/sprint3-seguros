# src/main.py (VERS√ÉO CORRIGIDA PARA O SPRINT 4 H√çBRIDO)

# Importa o m√≥dulo services da raiz do projeto (um n√≠vel acima de src)
import os
import sys

# Adiciona o diret√≥rio pai (raiz do sprint3) ao caminho de busca do Python
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from datetime import date  # Para usar a data atual

from services import emitir_apolice_hibrida

# from src.database import create_schema, get_db # Removido: N√£o √© mais persist√™ncia local
from src.exceptions import BusinessError
from src.sistema import SistemaSeguros

# --- DADOS DE TESTE DE LOGIN ---
# NOTE: O login real deve ser adaptado, mas para este teste, vamos simplificar
# assumindo que a parte do login ainda funciona se o DAO for mantido.


def main():
    # Remover chamadas de persist√™ncia antiga
    # create_schema()
    # db = next(get_db())
    # try:
    #     init_admin(db)
    # finally:
    #     db.close()

    sis = SistemaSeguros()
    print("=== Sistema de Seguros Sompo H√çBRIDO ===")

    # Se voc√™ n√£o precisar mais da autentica√ß√£o complexa, pode simular o login:
    ok, tipo = True, "admin"  # SIMULANDO LOGIN DE ADMIN PARA ACESSO F√ÅCIL

    if not ok:
        print("Login inv√°lido!")
        return

    while True:
        if tipo == "admin":
            print(
                """
--- MENU ADMIN (SPRINT 4) ---
1. Cadastrar Cliente (Ainda usa a l√≥gica antiga)
2. Atualizar Cliente (Ainda usa a l√≥gica antiga)
3. EMITIR AP√ìLICE H√çBRIDA (NOVO FLUXO)
4. Cancelar Ap√≥lice (Ainda usa a l√≥gica antiga)
5. Registrar Sinistro (Ainda usa a l√≥gica antiga)
6. Atualizar Status de Sinistro (Ainda usa a l√≥gica antiga)
7. Relat√≥rios
0. Sair
"""
            )
        else:
            # ... (menu usu√°rio comum)
            pass

        op = input("Op√ß√£o: ")
        try:
            if op == "0":
                print("Encerrando.")
                break
            # ... (Outras op√ß√µes do menu)

            # üõë NOVO FLUXO H√çBRIDO
            elif op == "3" and tipo == "admin":
                emitir_apolice_novo_fluxo()  # Chama a nova fun√ß√£o de emiss√£o

            # ... (Restante das op√ß√µes)

            elif op == "7" or (op == "1" and tipo == "comum"):
                # ... (L√≥gica de relat√≥rios)
                pass

            else:
                print("Op√ß√£o inv√°lida ou permiss√£o insuficiente.")
        except BusinessError as e:
            print(f"ERRO DE NEG√ìCIO: {e}")
        except ValueError as e:
            print(f"ERRO DE VALOR: Entrada inv√°lida. {e}")
        except Exception as e:
            print(f"ERRO INESPERADO: {e}")


def emitir_apolice_novo_fluxo():
    """
    Fun√ß√£o que coleta os dados necess√°rios e chama o servi√ßo h√≠brido.
    Substitui a l√≥gica de 'sis.emitir_apolice' do c√≥digo antigo.
    """
    cpf = input("CPF do cliente (Apenas para refer√™ncia): ")
    cliente_id = input("ID do Cliente (Real do MySQL): ")  # Requer o ID do MySQL

    print("Tipos: 1-Autom√≥vel, 2-Residencial, 3-Vida")
    tipo_seguro_op = input("Escolha o tipo de seguro (1/2/3): ")

    # Mapeamento do tipo de seguro (necess√°rio para a fun√ß√£o insert_apolice)
    tipo_map = {"1": "AUTO", "2": "RESIDENCIAL", "3": "VIDA"}
    tipo = tipo_map.get(tipo_seguro_op, "PADRAO")

    # Simplicamos a coleta de dados, focando apenas no valor para a inser√ß√£o no RDS
    valor = float(input("Valor total segurado (para o RDS): "))

    dados_apolice = {
        "cliente_id": cliente_id,
        "tipo": tipo,
        "valor": valor,
        "data_inicio": str(date.today()),
    }

    # üõë CHAMADA AO NOVO SERVI√áO H√çBRIDO üõë
    resultado_servico = emitir_apolice_hibrida(dados_apolice, usuario_acao="ADMIN_CLI")

    print("\n--- Resultado da Emiss√£o H√≠brida ---")
    print(resultado_servico)


# Remova o bloco original 'elif op == "3" and tipo == "admin":' do main() e chame a nova fun√ß√£o.
# O restante do seu c√≥digo main() fica inalterado.

if __name__ == "__main__":
    main()
